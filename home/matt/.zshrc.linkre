# export this so child processes know how to edit things
export EDITOR='vim'

# some aliases
alias e=$EDITOR
alias sz='source ~/.zshrc'
alias ll='ls -lah'

# history stuff, mostly adapted from 
# https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/history.zsh

# keep history
[ "$SAVEHIST" -lt 1000000 ] && SAVEHIST=1000000
[ "$HISTSIZE" -lt 5000000 ] && HISTSIZE=5000000
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"

setopt extended_history       # record timestamp of command in HISTFILE

setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

# no dups
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list

# don't add lines that start with a space into the history
setopt hist_ignore_space      # ignore commands that start with space

# Vi mode (edit commands inline or in vim)
bindkey -v

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then 
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# auto completions
fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

# kubectl completion
source <(command kubectl completion zsh)

[[ -r ~/.zshrc.local ]] && . ~/.zshrc.local
[[ -r ~/.zshrc.midnight ]] && . ~/.zshrc.midnight

# fzf completions, etc for linux
[[ -r /usr/share/fzf/key-bindings.zsh ]] && source /usr/share/fzf/key-bindings.zsh
[[ -r /usr/share/fzf/completion.zsh ]] && source /usr/share/fzf/completion.zsh
# for mac
[[ -r ~/.fzf.zsh ]] && . ~/.fzf.zsh

# keep path unique by using zsh path and specifying uniqueness
# otherwise, loading tmux doubles the path
typeset -aU path

# Go stuff
path=(/usr/local/go/bin $path)
path=($HOME/go/bin $path)

# Ruby stuff
if [ -x "$(command -v ruby)" ]; then
  path=(`ruby -e 'puts Gem.user_dir'`/bin $path)
  alias rspec='nocorrect rspec'
fi

# Yarn stuff
if [ -x "$(command -v yarn)" ]; then
  path=(`yarn global bin` $path)
  path=("$HOME/.yarn/bin" "$HOME/.config/yarn/global/node_modules/.bin" $path)
fi

# Python stuff
if [[ -x "$(command -v pyenv)" ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init --path)"
fi

# ASDF (Elixir) stuff
if [ -d "$HOME/.asdf/asdf.sh" ]; then
  . $HOME/.asdf/asdf.sh
  . $HOME/.asdf/completions/asdf.bash
fi

if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
fi


# prompt
function git_branch_name()
{
  git_branch_name_msg=''
  branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
  if [[ $branch != "" ]] then;
    git_branch_name_msg=' '$branch
  fi
}

# run git_branch_name before each prompt rendering
precmd() {
  git_branch_name
}

# allow for var substitutions in the prompt
setopt prompt_subst

PROMPT=''
if [[ ! -z "$SSH_TTY" ]]; then # only display the hostname if not local
  PROMPT+='%F{230}' # whitish
  PROMPT+='${(%):-%m} ' # %m is hostname
  PROMPT+='%f'
fi
PROMPT+='%F{255}' # gray
PROMPT+='%B%3~%b' # %3~ is dir to 3 levels
PROMPT+='$git_branch_name_msg ' # git branch
PROMPT+='%f' # end gray color
PROMPT+='%(?.%F{230}☀%f.%F{174}☇%f) ' # exit code thingy

# git aliases
alias gs='git status'
alias gc='git commit'
alias ga='git add'
alias gd='git diff'
alias gb='git branch'
alias gp='git pull && git push'

# poetry binary
export PATH="$HOME/.local/bin:$PATH"
