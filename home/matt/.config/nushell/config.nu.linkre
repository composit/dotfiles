$env.config.buffer_editor = "nvim"
$env.PASSWORD_STORE_DIR = ($env.HOME | path join ".sunk/.password-store")
$env.config.show_banner = false

def e [file: string = ""] {
    if ("buffer_editor" in $env.config) {
        ^$env.config.buffer_editor $file
    } else if ("EDITOR" in $env) {
        ^$env.EDITOR $file
    } else {
        print "Error: \$EDITOR environment variable is not set."
    }
}

def sn [] {
    exec nu --config ($nu.home-path | path join ".config/nushell/config.nu")
}

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
def tm [session: string = ""] {
  let change = if ("TMUX" in $env) { "switch-client" } else { "attach-session" }
  
  if $session != "" {
    do -i {
      tmux $change -t $session
    } otherwise {
      do -i {
        tmux new-session -d -s $session
        tmux $change -t $session
      }
    }
    return
  }
  
  let chosen_session = (tmux list-sessions -F "#{session_name}" | fzf --exit-0)
  if $chosen_session != "" {
    tmux $change -t $chosen_session
  } else {
    echo "No sessions found."
  }
}

# bak - create a backup of a file
def bak [file: string] {
  let current_date_time = (date now | format date "%Y%m%d%H%M%S")
  cp $file $"($file).($current_date_time).bak"
}
 
# Aliases
alias ll = ls -la
 
# History settings
$env.config.history.file_format = 'sqlite'
$env.config.history.max_size = 1_000_000
$env.config.history.sync_on_enter = false
$env.config.history.isolation = true
 
# Vi mode
$env.config.edit_mode = "vi"

# Git commit function
def git_commit_ticket [message: string] {
    let ticket = (git branch --show-current | find --regex "([A-Z]+-[0-9]+)")
    if $ticket != '' {
        echo $"Ticket found: ($ticket). Do you want to add it to the commit message? \(Y/n) "
        let choice = (read)
        if $choice == '' or $choice == 'y' or $choice == 'Y' {
            git commit -m $"($ticket) ($message)"
        } else {
            git commit -m $message
        }
    } else {
        git commit -m $message
    }
}

# Git adder function
def git_adder [] {
    let changed_files = (git status --porcelain | lines | each { |it| $it | split words | get 1 })
    for $file in $changed_files {
        echo $"file: $file"
        git diff $file
        echo "Do you want to add $file? (Y/n)"
        let response = (read)
        if $response == '' or $response == 'y' or $response == 'Y' {
            git add $file
            echo $"$file added."
        } else {
            echo $"$file not added."
        }
    }
}

# Git aliases
alias gs = git status
alias gc = echo "Please use gcm or gct instead of gc"
alias gcm = git_commit_ticket
alias gda = git_adder
alias ga = git add
alias gd = git diff
alias gb = git branch
def gp [] { git pull; git push }

# CD helpers
def --env cdf [] { ^fd --type d | fzf | cd $in }

def --env cdg [] { open ~/.cdg_paths | fzf | cd $in }

def cdgadd [] {
    let current_dir = (pwd)
    open ~/.cdg_paths | append $current_dir | sort | uniq | save ~/.cdg_paths
    open ~/.cdg_paths
}

def create_left_prompt [] {
    let path_segment = if (is-admin) {
        $"(ansi red_bold)($env.PWD)"
    } else {
        $"(ansi green_bold)($env.PWD)"
    }

    let is_git = (git rev-parse --is-inside-work-tree | complete | str trim | $in.stdout == "true")
    let git_segment = if $is_git {
        echo "it is"
        let git_branch = (do -i { git branch --show-current } | str trim)
        if $git_branch != "" {
            $"(ansi yellow_bold)[($git_branch)] "
        } else {
            ""
        }
    } else {
        "" 
    }

    $"($path_segment) ($git_segment)(ansi reset)"
}

$env.PROMPT_COMMAND = { create_left_prompt }
