# export this so child processes know how to edit things
export EDITOR='nvim'

# some aliases
alias e=$EDITOR
alias el='NVIM_APPNAME=lazyvim nvim'
alias eo='NVIM_APPNAME=nvim.old nvim'
alias sz='source $HOME/.config/zsh/.zshrc'
alias ll='ls -lah'

# history stuff, mostly adapted from 
# https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/history.zsh

# keep history
[ "$SAVEHIST" -lt 1000000 ] && SAVEHIST=1000000
[ "$HISTSIZE" -lt 5000000 ] && HISTSIZE=5000000
[ -z "$HISTFILE" ] && HISTFILE="$ZDOTDIR/.zsh_history"

setopt extended_history       # record timestamp of command in HISTFILE

setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

# no dups
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list

# don't add lines that start with a space into the history
setopt hist_ignore_space      # ignore commands that start with space

# Vi mode (edit commands inline or in vim)
bindkey -v

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then 
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# bak - create a backup of a file
bak() {
  current_date_time="`date +%Y%m%d%H%M%S`";
  cp $1 $1.$current_date_time.bak
}

# auto completions
fpath=(~/.zsh/completion $fpath)
if command -v brew %> /dev/null; then
  FPATH=$(brew --prefix)/share/zsh-completions:$(brew --prefix)/share/zsh/site-functions:$FPATH # needs to be before compinit on the mac
fi
autoload -Uz compinit && compinit -i

# kubectl completion
if [ -x "$(command -v kubectl)" ]; then
  source <(command kubectl completion zsh)
fi

[[ -r ~/.config/zsh/.zshrc.local ]] && . ~/.config/zsh/.zshrc.local
[[ -r ~/.config/zsh/.zshrc.midnight ]] && . ~/.config/zsh/.zshrc.midnight

# fzf completions, etc for linux
if command -v fzf-share >/dev/null; then
    source "$(fzf-share)/key-bindings.zsh"
    source "$(fzf-share)/completion.zsh"
fi
# for mac
[[ -r ~/.fzf.zsh ]] && . ~/.fzf.zsh

# keep path unique by using zsh path and specifying uniqueness
# otherwise, loading tmux doubles the path
typeset -aU path

# prompt
prompt off # clear the nixos prompt
function git_branch_name()
{
  git_branch_name_msg=''
  branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
  if [[ $branch != "" ]] then;
    git_branch_name_msg=' '$branch
  fi
}

# run git_branch_name before each prompt rendering
precmd() {
  git_branch_name
}

# allow for var substitutions in the prompt
setopt prompt_subst

PROMPT=''
if [[ -n "$SSH_CONNECTION" ]]; then # only display the hostname if not local
  # PROMPT+='%F{230}' # whitish
  PROMPT+='${(%):-%m} ' # %m is hostname
  # PROMPT+='%f'
fi
# PROMPT+='%F{255}' # gray
PROMPT+='%B%3~%b' # %3~ is dir to 3 levels
PROMPT+='$git_branch_name_msg ' # git branch
# PROMPT+='%f' # end gray color
# PROMPT+='%(?.%F{230}☀%f.%F{174}☇%f) ' # exit code thingy
PROMPT+='%(?.☀.%F{174}☇%f) ' # exit code thingy

# git aliases
alias gs='git status'
alias gc='echo "Please use gcm or gct instead of gc"'
alias gcm='git_commit_ticket'
alias ga='git add'
alias gd='git diff'
alias gb='git branch'
alias gp='git pull && git push'

function git_commit_ticket() {
  ticket=$(git branch --show-current | grep -oE '([A-Z]+-[0-9]+)')

  if [[ ! $ticket = "" ]]; then
    echo -n "Ticket found: $ticket. Do you want to add it to the commit message? (Y/n) "
    read choice
    if [[ $choice = "" || $choice = "y" || $choice = "Y" ]]; then
      git commit -m "$ticket $1"
      return
    fi
  fi

  git commit -m "$1"
}

# cd helpers
# CDF (doesn't seem to work well with deep directory structures)
alias cdf='cd $(find * -type d | fzf)'
# CDG
unalias cdg 2> /dev/null
cdg() {
   local dest_dir=$(cat ~/.cdg_paths | fzf )
   if [[ $dest_dir != '' ]]; then
      cd "$dest_dir"
   fi
}
export cdg > /dev/null

unalias cdgadd 2> /dev/null
cdgadd() {
   pwd >> ~/.cdg_paths
   sort ~/.cdg_paths -o ~/.cdg_paths
   uniq -u ~/.cdg_paths /tmp/.cdg_paths
   mv /tmp/.cdg_paths ~/.cdg_paths
   cat ~/.cdg_paths
}
export cdgadd > /dev/null
