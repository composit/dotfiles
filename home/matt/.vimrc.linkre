" 256 color
set t_Co=256

set encoding=utf-8

set nocompatible

syntax on
set showmatch
set ignorecase
set smartcase
set incsearch
set autoindent
set smartindent
set hlsearch
" set number relativenumber " show hybrid numbers
set nonumber norelativenumber " don't show numbers
set ruler

" quiet down
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" scroll offset (for z)
set scrolloff=10

" show tabs and trailing spaces
" this is enabled by ShowNumbers()
set listchars=tab:\|\ ,trail:Â·

" mycolors are set in ./vim/plugin/setcolors.vim
colorscheme goodwolf

" make the highlights and line numbers more visible
highlight Visual cterm=none ctermbg=Grey ctermfg=White guibg=Grey guifg=White
highlight LineNr ctermfg=yellow guifg=yellow

let mapleader=","

" Open and close folds with space
set foldmethod=syntax
set nofoldenable
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Repeat stuff in visual mode
xnoremap . :norm.<CR>

" Open files with <Leader>f
" map <Leader>f :CommandTFlush<cr>\|:CommandT<cr>
" map <Leader>f :CtrlP<cr>
map <Leader>f :Files<cr>

" Close all splits except the current one
map <Leader>o :only<cr>

" Close the quickfix windor
map <Leader>c :cclose<cr>

" Yank to clipboard
vmap <Leader>y "+y

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-test
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let test#strategy = "tslime"

" Tests
nmap <Leader>t :TestNearest <CR>
nmap <Leader>T :TestSuite <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GISTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COPILOT
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if !has('nvim')
	function! EnableCopilot()
		let g:ale_completion_enabled = 0
		let b:copilot_enabled = 1
	endfunction

	function! DisableCopilot()
		let g:ale_completion_enabled = 1
		let b:copilot_enabled = 0
	endfunction

	nmap <Leader>cp :call EnableCopilot()<CR>
end

" copilot can use gopls to evaluate the full project
" doesn't currently work
let g:copilot_filetypes = {
    \ 'go': 'gopls',
    \ }

imap <silent><script><expr> <C-a> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if !has('nvim')
	"let g:ale_sign_column_always = 0
	"only lint on save
	"let g:ale_lint_on_text_changed = 'never'
	"enable completion
	let g:ale_completion_enabled = 1
	"fix on save
	let g:ale_fix_on_save = 1
	"lint the whole package otherwise it fails if referencing things defined in
	"other files
	let g:ale_go_golangci_lint_package = 1

	" go to definition
	nmap <Leader>dd :ALEGoToDefinition<CR>
	nmap <Leader>dt :ALEGoToDefinition -tab<CR>
	nmap <Leader>dv :ALEGoToDefinition -vsplit<CR>

	" find references
	nmap <Leader>rr :ALEFindReferences<CR>
	nmap <Leader>rt :ALEFindReferences -tab<CR>
	nmap <Leader>rv :ALEFindReferences -vsplit<CR>

	" go to implementation
	nmap <Leader>ii :ALEGoToImplementation<CR>
	nmap <Leader>it :ALEGoToImplementation -tab<CR>
	nmap <Leader>iv :ALEGoToImplementation -vsplit<CR>

	" rename
	nmap <Leader>e :ALERename<CR>
end

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RipGrep
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <Leader>rg :Rg<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fugitive
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <Leader>gb :Git blame<CR>
nmap <Leader>gd :Gvdiffsplit<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle numbers, tabs, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! ToggleNumbers()
	set number!
	set list!
endfunction

nmap <Leader>b : call ToggleNumbers()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Transparent Background
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! Background_transparent()
	" regular
	highlight Normal ctermbg=NONE
	" line numbers
	highlight LineNr ctermbg=NONE
	" empty lines
	highlight EmptyLines ctermbg=NONE
	" special chars (tabs and such)
	highlight SpecialKey ctermbg=none
	" sign column (gutter, etc.)
	highlight SignColumn ctermbg=none
	" lines without text
	highlight NonText ctermbg=none
	" comments
	highlight Comment ctermbg=none
endfunction
nnoremap <Leader>r : call Background_transparent()<CR>
call Background_transparent()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" general
" git clone git@github.com:flazz/vim-colorschemes.git ~/.vim/pack/3rd-party-plugins/opt/vim-colorschemes
" git clone git@github.com:junegunn/fzf.git ~/.vim/pack/3rd-party-plugins/start/fzf
" git clone git@github.com:junegunn/fzf.vim.git ~/.vim/pack/3rd-party-plugins/start/fzf.vim
"
" gist
" git clone git@github.com:mattn/webapi-vim.git ~/.vim/pack/3rd-party-plugins/opt/webapi-vim
" git clone git@github.com:mattn/vim-gist.git ~/.vim/pack/3rd-party-plugins/opt/vim-gist
" to enable:
" * :packadd webapi-vim
" * :packadd vim-gist
"
" all coding
" git clone git@github.com:tpope/vim-fugitive.git ~/.vim/pack/3rd-party-plugins/opt/vim-fugitive
" git clone git@github.com:dense-analysis/ale.git ~/.vim/pack/3rd-party-plugins/opt/ale
" git clone git@github.com:janko-m/vim-test.git ~/.vim/pack/3rd-party-plugins/opt/vim-test
" git clone git@github.com:jgdavey/tslime.vim.git ~/.vim/pack/3rd-party-plugins/opt/tslime.vim
"
" go
" git clone git@github.com:sebdah/vim-delve.git ~/.vim/pack/3rd-party-plugins/opt/vim-delve
"
" ruby/rails
" git clone git@github.com:tpope/vim-rails.git ~/.vim/pack/3rd-party-plugins/opt/vim-rails
" git clone git@github.com:tpope/vim-endwise.git ~/.vim/pack/3rd-party-plugins/opt/vim-endwise
"
" elixir
" git clone git@github.com:elixir-editors/vim-elixir.git ~/.vim/pack/3rd-party-plugins/opt/vim-elixir
" git clone git@github.com:slashmili/alchemist.vim.git ~/.vim/pack/3rd-party-plugins/opt/alchemist.vim
"
" typescript
" git clone git@github.com:leafgarland/typescript-vim.git ~/.vim/pack/3rd-party-plugins/opt/typescript-vim
"
" clojure
" git clone git@github.com:guns/vim-clojure-static.git ~/.vim/pack/3rd-party-plugins/opt/vim-clojure-static
" git clone git@github.com:guns/vim-clojure-highlight.git ~/.vim/pack/3rd-party-plugins/opt/vim-clojure-highlight
" git clone git@github.com:tpope/vim-fireplace.git ~/.vim/pack/3rd-party-plugins/opt/vim-fireplace
" git clone git@github.com:kien/rainbow_parentheses.vim.git ~/.vim/pack/3rd-party-plugins/opt/rainbow_parentheses.vim
"
" python
" git clone git@github.com:psf/black.git ~/.vim/pack/3rd-party-plugins/opt/black
"
" ansible
" git clone git@github.com:pearofducks/ansible-vim.git ~/.vim/pack/3rd-party-plugins/opt/ansible-vim
" to enable: :packadd ansible-vim
"
" unused?
" git clone git@github.com:guns/vim-sexp.git ~/.vim/pack/3rd-party-plugins/opt/vim-sexp
" git clone git@github.com:tpope/vim-sexp-mappings-for-regular-people.git ~/.vim/pack/3rd-party-plugins/opt/vim-sexp-mappings-for-regular-people
" git clone git@github.com:tpope/vim-repeat.git ~/.vim/pack/3rd-party-plugins/opt/vim-repeat
" called by ftplugin files for specific languages
function Enable_coding_plugins()
       packadd vim-fugitive
       if !has('nvim')
	       packadd ale
       end
       packadd vim-test
       packadd tslime.vim
       packadd copilot.vim
endfunction

if has('nvim')
	packadd nvim-lspconfig
	packadd plenary.nvim
	packadd CopilotChat.nvim
end

filetype plugin on
