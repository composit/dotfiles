" 256 color
set t_Co=256

set encoding=utf-8

set nocompatible

call plug#begin('~/.vim/plugged')
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'tpope/vim-endwise', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'flazz/vim-colorschemes'
Plug 'airblade/vim-gitgutter'
Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'janko-m/vim-test'
Plug 'jgdavey/tslime.vim'
Plug 'w0rp/ale', { 'for': ['go', 'typescript', 'python', 'sh'] }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'guns/vim-sexp', { 'for': 'clojure' }
Plug 'tpope/vim-repeat', { 'for': 'clojure' }
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'guns/vim-clojure-highlight', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'kien/rainbow_parentheses.vim', { 'for': 'clojure' }
Plug 'psf/black', { 'for': 'python', 'tag': '19.10b0' }
call plug#end()

syntax on
set showmatch
set smartcase
set incsearch
set autoindent
set hlsearch
set number " show the numbers

" quiet down
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" show tabs and trailing spaces
set listchars=tab:\|\ ,trail:Â·
set list

" mycolors are set in ./vim/plugin/setcolors.vim
colorscheme goodwolf

let mapleader=","

" Open and close folds with space
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Repeat stuff in visual mode
xnoremap . :norm.<CR>

" Open files with <leader>f
" map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
" map <leader>f :CtrlP<cr>
map <leader>f :Files<cr>

" yank to the system clipboard
set clipboard=unnamed

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-test
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let test#strategy = "tslime"

" Tests
nmap <Leader>t :TestNearest -v <CR>
nmap <Leader>T :TestSuite <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GISTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ale_sign_column_always = 1
"only lint on save
"let g:ale_lint_on_text_changed = 'never'
"enable completion
let g:ale_completion_enabled = 1
"fix on save
let g:ale_fix_on_save = 1

" go to definition
nmap <Leader>dd :ALEGoToDefinition<CR>
nmap <Leader>dt :ALEGoToDefinition -tab<CR>
nmap <Leader>dv :ALEGoToDefinition -vsplit<CR>

" find references
nmap <Leader>rr :ALEFindReferences<CR>
nmap <Leader>rt :ALEFindReferences -tab<CR>
nmap <Leader>rv :ALEFindReferences -vsplit<CR>

" rename
nmap <Leader>e :ALERename<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Transparent Background
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! Background_transparent()
	" regular
	highlight Normal guibg=NONE ctermbg=NONE
	" line numbers
	"highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
	highlight LineNr ctermbg=NONE guibg=NONE
	" empty lines
	highlight EmptyLines guibg=NONE ctermbg=NONE
endfunction
nnoremap <Leader>r : call Background_transparent()<CR>
call Background_transparent()
